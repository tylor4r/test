1. В репозитории с моим проектом нужно кликнуть правой кнопкой мыши и выбрать git bash, который
вызовет командную строку
2. Пишу команду git init, создаётся скрытая папка с проектом
3. Создаю файл README командой - echo README.md
4. Теперь нужно произвести настройку и главное это установить имя пользователя и почту.
Если над проектом работает много людей, то нужно знать, кто, что поменял, а поэтому и необходима
почта и имя.
 Все команды гита начинаются с ключевого слова git
 5. git config
 Тут есть два вариант первый: git config --global, установит глобально на компьютер или
 git config --local, тогда установит только в ту папку где мой проект
 Идём дальше нужно установить имя пишу: git config --local user.name "Dima"
 Пробую... Получилось
 Теперь устанавливаю email git config user.email tylor4r@gmail.com
 Всё получилось и теперь Git готов к работе
 Состояния:
 Первое состояние, когда файл создан и просто существует.
 В этом состоянии git не следит за файлом, файл просто есть и всё.
 Второе состояние, с помощью специальной команды я говорю git следить за этим файлом и он попадает в индекс
 Здесь он уже следит за изменениями нашего файла
 Третье состояние, когда файл и все его изменения сохранются в системе контроля версий. В этом состоянии можно увидеть:
 Когда я файл изменял или как и в любой момент могу к нему вернуться.
 Ну и в этом состоянии я уже говорю git вот в этом состоянии запомни и сохрани, если что теперь я могу к нему вернуться.

Теперь команды:
1. git add -A означает, добавить все файлы, которые есть в папке в git
Всё файлы добавлены, чтобы проверить, есть команда
git status
Всё это значит, что файлы во втором состоянии.
Теперь перевожу их в Третье, команда:
git commit -a буква a здесь уже маленькая
Так можно оставить сообщение при сохрании commit для этого используем команду:
git commit -a -m "Это мой первый коммит"
Если сейчас написать git status, то получу ответ: "Ничего не надо комментить"
Так теперь дальше: Захожу в Index.html и меняю что-нибудь, либо добавляю
Если сейчас дам команду git status, то напишет, что был изменёл файл и нужно его закоммитеть
Сохраняю еще раз, но теперь использую другой синтаксис
git add *.html все, если проверить git status, то скажет что было закоментино
Теперь коммитирую всё и пишу текст
git commit -a -m "Это мой третий коммит с сообщением второй"
Всё, теперь всё снова закоментино
Теперь покажу тебе команду, которая поможет проследить все изменения
git log  Показывает, что я только два раза коммител, видимо в первый раз я просто добавил, но не коммител
Информация, которая появляется идёт следующая, Имя автора, дата изменения и хэш (номер длинный)
Читать это не удобно, поэтому в ссылках к уроку, на сайте можно в обучении найти много интересных и полезных конструкций
Чтобы потом их добавить используется команда:
shift +insert и из буфера обмена копируется то, что я сохранил туда
Так теперь еще одна полезная команда:
git log -- help В браузере откроется список команд, которые необходимы, учить их все не нужно, но зато понятно теперь где они находятся
Эта команда работает так же и в офлайн режиме без доступа к интернету
Чтобы удалить всю ненужную информацию с консоли, есть команда - 
clear
Так теперь самое время связать локальный репозиторий с репозиторием на github для этого:
1. Зарегестрироваться на github
2. Нажать вкладку new repozitory
3. Написать ему имя и дать какое-нибудь описание при необходимости, выбрать паблик, так как за Privet на github нужно платить
и пропустить галочку, так как временный файл я уже создал
4. Всё нажимаю создать репозиторий
5. Теперь появляется подсказка как подключить мой репозиторий. Первые 4 команды уже я зделал, так как репозиторий уже создан на локальном диске.
6. Копирую команду с сылкой, для добавления моего репозитория
git remote add origin https://github.com/tylor4r/test.git  Вот эта команда
Так разберём remote - означает, что я работаю с удалённым репозиторием 
add - то, что я добавляю репозиторй
origin - это псевдоним, его я могу указывать таким, какой необходим, поэтому я его меняю и называю просто test
получаю git remote add test https://github.com/tylor4r/test.git
Ну а путь у всех разный
7. Теперь беру следующую команду и вставляю её в gitbash 
git push -u origin master
так разберу команды, команда push означает то, что перенисти наши файлы, которые находятся локально на github
Дальше -u это, чтобы запомнить куда по умолчанию пушить файлы
И наконец название репозитория - test, то которое я сам дал
А master - моя главная ветка
Появилось модальное окно, которое запросило логин и пароль от github, я ввёл и всё запушило на сайт
Ураааа! Отлично всё есть и всё работает. Файлы появились в интернете на сервере.
всё прошло успешно и в gitbash состояние done
Так теперь создаю специально 2 тестовых папки и по одному файлу, и пробую провести все необходимые команды и запушить интересных
командой git push test









